Program⟶Statements
Statements⟶Statement ; Statements
Statements⟶
Statement⟶Compound_stmt
Statement⟶Simple_stmt
Simple_stmt⟶Assignment_Call
Simple_stmt⟶Return_stmt
Simple_stmt⟶Global_stmt
Simple_stmt⟶#break break
Simple_stmt⟶#continue continue
Compound_stmt⟶Function_def
Compound_stmt⟶If_stmt
Compound_stmt⟶Iteration_stmt
Assignment_Call⟶#pid ID B
B⟶= C
B⟶[ Expression ] = C
B⟶( Arguments )
C⟶Expression
C⟶[ Expression List_Rest ]
List_Rest⟶, Expression List_Rest
List_Rest⟶
Return_stmt⟶return Return_Value
Return_Value⟶Expression
Return_Value⟶
Global_stmt⟶global #pid ID
Function_def⟶def ID ( Params ) : Statements
Params⟶#pid ID Params_Prime
Params⟶
Params_Prime⟶, #pid ID Params_Prime
Params_Prime⟶
If_stmt⟶if Relational_Expression #save : Statements Else_block
Else_block⟶else #jpf_save : Statements #jp
Else_block⟶#jpf
Iteration_stmt⟶while #while ( Relational_Expression ) #label Statements #end_while
Relational_Expression⟶Expression Relop Expression
Relop⟶==
Relop⟶<
Expression⟶Term Expression_Prime
Expression_Prime⟶+ Term Expression_Prime #calculation
Expression_Prime⟶- Term Expression_Prime #calculation
Expression_Prime⟶
Term⟶Factor Term_Prime
Term_Prime⟶* Factor Term_Prime #calculation
Term_Prime⟶
Factor⟶Atom Power
Power⟶** Factor #calculation
Power⟶Primary
Primary⟶[ Expression ] Primary
Primary⟶( Arguments ) Primary
Primary⟶
Arguments⟶Expression Arguments_Prime
Arguments⟶
Arguments_Prime⟶, Expression Arguments_Prime
Arguments_Prime⟶
Atom⟶#pid ID
Atom⟶#pnum NUM